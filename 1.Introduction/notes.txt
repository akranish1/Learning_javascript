We can also declare multiple variables in one line:
let user = 'John', age = 25, message = 'Hello';

//let and var//

That might seem shorter, but we don’t recommend it. For the sake of better readability
Variables, declared with *var*, are either function-scoped or global-scoped.   
if (true) {
  var test = true; // use "var" instead of "let"
}

alert(test);
this code will run with var but not with let,becoz let is not global scoped.
If we used let test instead of var test, then the variable would only be visible inside if
1. “var” tolerates redeclarations but let can be.
2. it can be declared and use in any order.
3. Hoisting:
    People also call such behavior “hoisting” (raising), because all var are “hoisted” (raised) to the top of the function.
4. Declarations are hoisted, but assignments are not.
    That’s best demonstrated with an example:
    function sayHi() {
    alert(phrase);

    var phrase = "Hello";
    }
    sayHi();
    OUTPUT:undefined

    it means you just can't use it before assigning ;

//end of let and var//

//use strict//
can be used to detect anomalies from old js to new js
eg: we can declare a variable without let,var in old js
    but we can't do same in new version of js.

by using *using strict* we will get error in prev condn.
//

//const//
To declare a constant (unchanging) variable, use const instead of let